var board = new Array();
var score = 0;

var startx = 0;
var starty = 0;
var endx = 0;
var endy = 0;

$(document).ready(function(){
    prepareForMobile();
    newgame();
})

function prepareForMobile(){

    if(documentWidth > 500){
        gridContainerWidth = 500;
        cellSpace = 20;
        cellSideLength = 100;
    }

    $("#grid-container").css("width",gridContainerWidth - 2 * cellSpace);
    $("#grid-container").css("height",gridContainerWidth - 2 * cellSpace);
    $("#grid-container").css("padding",cellSpace);
    $("#grid-container").css("border-radius",0.02*gridContainerWidth);

    $(".grid-cell").css("width",cellSideLength);
    $(".grid-cell").css("height",cellSideLength);
    $(".grid-cell").css("border-radius",0.02*cellSideLength);
}

function newgame(){
    //初始化
    init();
    //
    generateOneNumber();
    generateOneNumber();
}

function init(){
    //将十六个格子排列
    for(var i = 0; i < 4; i ++ ){
        for(var j = 0; j < 4; j ++ ){
            var gridCell = $("#grid-cell-" + i + "-" + j);
            gridCell.css("top",getPosTop( i , j ));
            gridCell.css("left",getPosLeft( i , j ));
        }
    }
    for(var i = 0; i < 4; i ++){
        board[i]=new Array();
        for(var j =0; j < 4; j ++){
            board[i][j]=0;
        }
    }

    updateBoardView();

    score = 0;

}

function updateBoardView(){

    $(".number-cell").remove();

    for(var i = 0; i < 4; i ++ ){
        for(var j = 0; j < 4; j ++ ){
            $("#grid-container").append("<div class='number-cell' id='number-cell-"+i+'-'+j+"'></div>")
            var theNumberCell = $("#number-cell-"+i+'-'+j);

            if(board[i][j] == 0){
              theNumberCell.css('width','0px');
              theNumberCell.css('height','0px');
              theNumberCell.css('top',getPosTop(i,j) + cellSideLength/2);
              theNumberCell.css('left',getPosLeft(i,j) + cellSideLength/2);
            }
            else
            {
              theNumberCell.css('width',cellSideLength);
              theNumberCell.css('height',cellSideLength);
              theNumberCell.css('top',getPosTop(i,j));
              theNumberCell.css('left',getPosLeft(i,j));
              theNumberCell.css('background-color',getNumberBackgroundColor(board[i][j]));
              theNumberCell.css('color',getNumberColor(board[i][j]));
              theNumberCell.text(board[i][j]);
            } 
        }
    }
    $(".number-cell").css("line-height",cellSideLength + "px")
    $(".number-cell").css("font-size",0.6*cellSideLength + "px")
}

function generateOneNumber(){

    if(nospace(board)){
        return false;
    }
    //
    var randx=parseInt(Math.floor(Math.random()*4));
    var randy=parseInt(Math.floor(Math.random()*4));
    while(true){
        if(board[randx][randy] == 0){
            break;
        }
        var randx=parseInt(Math.floor(Math.random()*4));
        var randy=parseInt(Math.floor(Math.random()*4));
    }
    //
    var randNumber = Math.random() < 0.5 ? 2 : 4 ;

    board[randx][randy] = randNumber;

    showNumberWithAnimation(randx,randy,randNumber);
   
    return true;

}

$(document).keydown(function(event){

    event.preventDefault();

    switch(event.keyCode)
    {
        case 37:
            if(moveLeft()){
                setTimeout("generateOneNumber()",210);
                setTimeout("isgameover()",300);
            }  //left
        break;
        case 38:
            if(moveUp()){
                setTimeout("generateOneNumber()",210);
                setTimeout("isgameover()",300);
            }  //up
        break;
        case 39:
            if(moveRight()){
                setTimeout("generateOneNumber()",210);
                setTimeout("isgameover()",300);
            }  //right
        break;
        case 40:
            if(moveDown()){
                setTimeout("generateOneNumber()",210);
                setTimeout("isgameover()",300);
            }  //down
        break;
        default:
        break;
    }


});

document.addEventListener('touchstart',function(event){
    startx = event.touches[0].pageX;
    starty = event.touches[0].pageY;
});

document.addEventListener('touchend',function(event){
    endx = event.changedTouches[0].pageX;
    endy = event.changedTouches[0].pageY;

    var deltax = endx - startx;
    var deltay = endy - starty;
    if(Math.abs(deltax)<0.3*documentWidth&&Math.abs(deltay)<0.3*documentWidth)
    return;

    if( Math.abs(deltax) >= Math.abs(deltay)){
        if(deltax > 0){

            if(moveRight()){
                setTimeout("generateOneNumber()",210);
                setTimeout("isgameover()",300);
            }  //right

        }
        else{

            if(moveLeft()){
                setTimeout("generateOneNumber()",210);
                setTimeout("isgameover()",300);
            }  //left

        }
    }
    else{

        if(deltax > 0){

            if(moveDown()){
                setTimeout("generateOneNumber()",210);
                setTimeout("isgameover()",300);
            }  //down

        }
        else{

            if(moveUp()){
                setTimeout("generateOneNumber()",210);
                setTimeout("isgameover()",300);
            }  //up

        }
    }
    

});

function isgameover(){
    if(nospace(board)&&nomove(board)){
        gameover();
    }
}

function gameover(){
    alert("gameover!")
}

function moveLeft(){

    if(!canMoveLeft(board)){
        return false;
    }

    for (var i = 0; i < 4 ; i ++){
		for (var j = 1 ; j < 4 ; j ++) {
            if(board[i][j] != 0){
                for(var k = 0 ; k < j ; k ++){
                    if(board[i][k] == 0 && noBlockHorizontalLeft(i,k,j,board)){
                        showMoveAnimation(i , j , i ,k );
                        board[i][k] = board[i][j];
                        board[i][j] =0;
                        continue;
                    }
                    else if( board[i][k] == board[i][j] && noBlockHorizontalLeft(i,k,j,board)){
                        showMoveAnimation(i , j , i ,k );
                        board[i][k] += board[i][j];
                        score += board[i][j];
                        board[i][j] =0;
                        updateScore(score);
                        continue;
                    }
                }
            }
        }
    }
    setTimeout("updateBoardView()",200);
    return true;
}


function moveRight(){

    if(!canMoveRight(board)){
        return false;
    }

    for (var i = 0; i < 4 ; i ++){
		for (var j = 2 ; j >=0 ; j --) {
            if(board[i][j] != 0){
                for(var k = 3 ; k > j ; k --){
                    if(board[i][k] == 0 && noBlockHorizontalRight(i,k,j,board)){
                        showMoveAnimation(i , j , i ,k );
                        board[i][k] = board[i][j];
                        board[i][j] =0;
                        continue;
                    }
                    else if( board[i][k] == board[i][j] && noBlockHorizontalRight(i,k,j,board)){
                        showMoveAnimation(i , j , i ,k );
                        board[i][k] += board[i][j];
                        score += board[i][j];
                        board[i][j] =0;
                        updateScore(score);
                        continue;
                    }
                }
            }
        }
    }
    setTimeout("updateBoardView()",200);
    return true;
}

function moveUp(){

    if(!canMoveUp(board)){
        return false;
    }

    for (var i = 0; i < 4 ; i ++){
		for (var j = 0 ; j < 4 ; j ++) {
            if(board[i][j] != 0){
                for(var k = 0 ; k < i ; k ++){
                    if(board[k][j] == 0 && noBlockHorizontalUp(i,k,j,board)){
                        showMoveAnimation(i , j , k ,j );
                        board[k][j] = board[i][j];
                        board[i][j] =0;
                        continue;
                    }
                    else if( board[k][j] == board[i][j] && noBlockHorizontalUp(i,k,j,board)){
                        showMoveAnimation(i , j , k ,j );
                        board[k][j] += board[i][j];
                        score += board[i][j];
                        board[i][j] =0;
                        updateScore(score);
                        continue;
                    }
                }
            }
        }
    }
    setTimeout("updateBoardView()",200);
    return true;
}

function moveDown(){

    if(!canMoveDown(board)){
        return false;
    }

    for (var i = 2; i >=0 ; i --){
		for (var j = 0 ; j < 4 ; j ++) {
            if(board[i][j] != 0){
                for(var k = 3 ; k > i ; k --){
                    if(board[k][j] == 0 && noBlockHorizontalDown(i,k,j,board)){
                        showMoveAnimation(i , j , k ,j );
                        board[k][j] = board[i][j];
                        board[i][j] =0;
                        continue;
                    }
                    else if( board[k][j] == board[i][j] && noBlockHorizontalDown(i,k,j,board)){
                        showMoveAnimation(i , j , k ,j );
                        board[k][j] += board[i][j];
                        score += board[i][j];
                        board[i][j] =0;
                        updateScore(score);
                        continue;
                    }
                }
            }
        }
    }
    setTimeout("updateBoardView()",200);
    return true;
}